// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package signaling

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	api "github.com/strukturag/nextcloud-spreed-signaling/api"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling(in *jlexer.Lexer, out *TurnCredentials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "username":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Username = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Password = string(in.String())
			}
		case "ttl":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TTL = int64(in.Int64())
			}
		case "uris":
			if in.IsNull() {
				in.Skip()
				out.URIs = nil
			} else {
				in.Delim('[')
				if out.URIs == nil {
					if !in.IsDelim(']') {
						out.URIs = make([]string, 0, 4)
					} else {
						out.URIs = []string{}
					}
				} else {
					out.URIs = (out.URIs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					if in.IsNull() {
						in.Skip()
					} else {
						v1 = string(in.String())
					}
					out.URIs = append(out.URIs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling(out *jwriter.Writer, in TurnCredentials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int64(int64(in.TTL))
	}
	{
		const prefix string = ",\"uris\":"
		out.RawString(prefix)
		if in.URIs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.URIs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TurnCredentials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TurnCredentials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TurnCredentials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TurnCredentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling1(in *jlexer.Lexer, out *RoomSessionData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "userid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling1(out *jwriter.Writer, in RoomSessionData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserId != "" {
		const prefix string = ",\"userid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoomSessionData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoomSessionData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoomSessionData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoomSessionData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling1(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling2(in *jlexer.Lexer, out *OcsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "ocs":
			if in.IsNull() {
				in.Skip()
				out.Ocs = nil
			} else {
				if out.Ocs == nil {
					out.Ocs = new(OcsBody)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Ocs).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling2(out *jwriter.Writer, in OcsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ocs\":"
		out.RawString(prefix[1:])
		if in.Ocs == nil {
			out.RawString("null")
		} else {
			(*in.Ocs).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OcsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OcsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OcsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OcsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling2(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling3(in *jlexer.Lexer, out *OcsMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "status":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Status = string(in.String())
			}
		case "statuscode":
			if in.IsNull() {
				in.Skip()
			} else {
				out.StatusCode = int(in.Int())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Message = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling3(out *jwriter.Writer, in OcsMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"statuscode\":"
		out.RawString(prefix)
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OcsMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OcsMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OcsMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OcsMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling3(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling4(in *jlexer.Lexer, out *OcsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "meta":
			if in.IsNull() {
				in.Skip()
			} else {
				(out.Meta).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Data).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling4(out *jwriter.Writer, in OcsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix[1:])
		(in.Meta).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OcsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OcsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OcsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OcsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling4(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling5(in *jlexer.Lexer, out *BackendServerRoomResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Type = string(in.String())
			}
		case "dialout":
			if in.IsNull() {
				in.Skip()
				out.Dialout = nil
			} else {
				if out.Dialout == nil {
					out.Dialout = new(BackendRoomDialoutResponse)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Dialout).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling5(out *jwriter.Writer, in BackendServerRoomResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Dialout != nil {
		const prefix string = ",\"dialout\":"
		out.RawString(prefix)
		(*in.Dialout).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerRoomResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerRoomResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerRoomResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerRoomResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling5(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling6(in *jlexer.Lexer, out *BackendServerRoomRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Type = string(in.String())
			}
		case "invite":
			if in.IsNull() {
				in.Skip()
				out.Invite = nil
			} else {
				if out.Invite == nil {
					out.Invite = new(BackendRoomInviteRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Invite).UnmarshalEasyJSON(in)
				}
			}
		case "disinvite":
			if in.IsNull() {
				in.Skip()
				out.Disinvite = nil
			} else {
				if out.Disinvite == nil {
					out.Disinvite = new(BackendRoomDisinviteRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Disinvite).UnmarshalEasyJSON(in)
				}
			}
		case "update":
			if in.IsNull() {
				in.Skip()
				out.Update = nil
			} else {
				if out.Update == nil {
					out.Update = new(BackendRoomUpdateRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Update).UnmarshalEasyJSON(in)
				}
			}
		case "delete":
			if in.IsNull() {
				in.Skip()
				out.Delete = nil
			} else {
				if out.Delete == nil {
					out.Delete = new(BackendRoomDeleteRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Delete).UnmarshalEasyJSON(in)
				}
			}
		case "incall":
			if in.IsNull() {
				in.Skip()
				out.InCall = nil
			} else {
				if out.InCall == nil {
					out.InCall = new(BackendRoomInCallRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.InCall).UnmarshalEasyJSON(in)
				}
			}
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				if out.Participants == nil {
					out.Participants = new(BackendRoomParticipantsRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Participants).UnmarshalEasyJSON(in)
				}
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(BackendRoomMessageRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Message).UnmarshalEasyJSON(in)
				}
			}
		case "switchto":
			if in.IsNull() {
				in.Skip()
				out.SwitchTo = nil
			} else {
				if out.SwitchTo == nil {
					out.SwitchTo = new(BackendRoomSwitchToMessageRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.SwitchTo).UnmarshalEasyJSON(in)
				}
			}
		case "dialout":
			if in.IsNull() {
				in.Skip()
				out.Dialout = nil
			} else {
				if out.Dialout == nil {
					out.Dialout = new(BackendRoomDialoutRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Dialout).UnmarshalEasyJSON(in)
				}
			}
		case "transient":
			if in.IsNull() {
				in.Skip()
				out.Transient = nil
			} else {
				if out.Transient == nil {
					out.Transient = new(BackendRoomTransientRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Transient).UnmarshalEasyJSON(in)
				}
			}
		case "received":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ReceivedTime = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling6(out *jwriter.Writer, in BackendServerRoomRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Invite != nil {
		const prefix string = ",\"invite\":"
		out.RawString(prefix)
		(*in.Invite).MarshalEasyJSON(out)
	}
	if in.Disinvite != nil {
		const prefix string = ",\"disinvite\":"
		out.RawString(prefix)
		(*in.Disinvite).MarshalEasyJSON(out)
	}
	if in.Update != nil {
		const prefix string = ",\"update\":"
		out.RawString(prefix)
		(*in.Update).MarshalEasyJSON(out)
	}
	if in.Delete != nil {
		const prefix string = ",\"delete\":"
		out.RawString(prefix)
		(*in.Delete).MarshalEasyJSON(out)
	}
	if in.InCall != nil {
		const prefix string = ",\"incall\":"
		out.RawString(prefix)
		(*in.InCall).MarshalEasyJSON(out)
	}
	if in.Participants != nil {
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		(*in.Participants).MarshalEasyJSON(out)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.SwitchTo != nil {
		const prefix string = ",\"switchto\":"
		out.RawString(prefix)
		(*in.SwitchTo).MarshalEasyJSON(out)
	}
	if in.Dialout != nil {
		const prefix string = ",\"dialout\":"
		out.RawString(prefix)
		(*in.Dialout).MarshalEasyJSON(out)
	}
	if in.Transient != nil {
		const prefix string = ",\"transient\":"
		out.RawString(prefix)
		(*in.Transient).MarshalEasyJSON(out)
	}
	if in.ReceivedTime != 0 {
		const prefix string = ",\"received\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReceivedTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerRoomRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerRoomRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerRoomRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerRoomRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling6(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling7(in *jlexer.Lexer, out *BackendServerInfoVideoRoom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Name = string(in.String())
			}
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "author":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Author = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling7(out *jwriter.Writer, in BackendServerInfoVideoRoom) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoVideoRoom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoVideoRoom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoVideoRoom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoVideoRoom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling7(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling8(in *jlexer.Lexer, out *BackendServerInfoSfuProxy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "url":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Url = string(in.String())
			}
		case "ip":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IP = string(in.String())
			}
		case "connected":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Connected = bool(in.Bool())
			}
		case "temporary":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Temporary = bool(in.Bool())
			}
		case "shutdown":
			if in.IsNull() {
				in.Skip()
				out.Shutdown = nil
			} else {
				if out.Shutdown == nil {
					out.Shutdown = new(bool)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Shutdown = bool(in.Bool())
				}
			}
		case "uptime":
			if in.IsNull() {
				in.Skip()
				out.Uptime = nil
			} else {
				if out.Uptime == nil {
					out.Uptime = new(time.Time)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.Uptime).UnmarshalJSON(data))
					}
				}
			}
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					if in.IsNull() {
						in.Skip()
					} else {
						v4 = string(in.String())
					}
					out.Features = append(out.Features, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "country":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Country = string(in.String())
			}
		case "load":
			if in.IsNull() {
				in.Skip()
				out.Load = nil
			} else {
				if out.Load == nil {
					out.Load = new(uint64)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Load = uint64(in.Uint64())
				}
			}
		case "bandwidth":
			if in.IsNull() {
				in.Skip()
				out.Bandwidth = nil
			} else {
				if out.Bandwidth == nil {
					out.Bandwidth = new(EventProxyServerBandwidth)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Bandwidth).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling8(out *jwriter.Writer, in BackendServerInfoSfuProxy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"connected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Connected))
	}
	{
		const prefix string = ",\"temporary\":"
		out.RawString(prefix)
		out.Bool(bool(in.Temporary))
	}
	if in.Shutdown != nil {
		const prefix string = ",\"shutdown\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Shutdown))
	}
	if in.Uptime != nil {
		const prefix string = ",\"uptime\":"
		out.RawString(prefix)
		out.Raw((*in.Uptime).MarshalJSON())
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if len(in.Features) != 0 {
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Features {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	if in.Load != nil {
		const prefix string = ",\"load\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.Load))
	}
	if in.Bandwidth != nil {
		const prefix string = ",\"bandwidth\":"
		out.RawString(prefix)
		(*in.Bandwidth).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoSfuProxy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoSfuProxy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoSfuProxy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoSfuProxy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling8(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling9(in *jlexer.Lexer, out *BackendServerInfoSfuJanus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "url":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Url = string(in.String())
			}
		case "connected":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Connected = bool(in.Bool())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Name = string(in.String())
			}
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "author":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Author = string(in.String())
			}
		case "datachannels":
			if in.IsNull() {
				in.Skip()
				out.DataChannels = nil
			} else {
				if out.DataChannels == nil {
					out.DataChannels = new(bool)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.DataChannels = bool(in.Bool())
				}
			}
		case "fulltrickle":
			if in.IsNull() {
				in.Skip()
				out.FullTrickle = nil
			} else {
				if out.FullTrickle == nil {
					out.FullTrickle = new(bool)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.FullTrickle = bool(in.Bool())
				}
			}
		case "localip":
			if in.IsNull() {
				in.Skip()
			} else {
				out.LocalIP = string(in.String())
			}
		case "ipv6":
			if in.IsNull() {
				in.Skip()
				out.IPv6 = nil
			} else {
				if out.IPv6 == nil {
					out.IPv6 = new(bool)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.IPv6 = bool(in.Bool())
				}
			}
		case "videoroom":
			if in.IsNull() {
				in.Skip()
				out.VideoRoom = nil
			} else {
				if out.VideoRoom == nil {
					out.VideoRoom = new(BackendServerInfoVideoRoom)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.VideoRoom).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling9(out *jwriter.Writer, in BackendServerInfoSfuJanus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"connected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Connected))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	if in.DataChannels != nil {
		const prefix string = ",\"datachannels\":"
		out.RawString(prefix)
		out.Bool(bool(*in.DataChannels))
	}
	if in.FullTrickle != nil {
		const prefix string = ",\"fulltrickle\":"
		out.RawString(prefix)
		out.Bool(bool(*in.FullTrickle))
	}
	if in.LocalIP != "" {
		const prefix string = ",\"localip\":"
		out.RawString(prefix)
		out.String(string(in.LocalIP))
	}
	if in.IPv6 != nil {
		const prefix string = ",\"ipv6\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IPv6))
	}
	if in.VideoRoom != nil {
		const prefix string = ",\"videoroom\":"
		out.RawString(prefix)
		(*in.VideoRoom).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoSfuJanus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoSfuJanus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoSfuJanus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoSfuJanus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling9(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling10(in *jlexer.Lexer, out *BackendServerInfoSfu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "mode":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Mode = SfuMode(in.String())
			}
		case "janus":
			if in.IsNull() {
				in.Skip()
				out.Janus = nil
			} else {
				if out.Janus == nil {
					out.Janus = new(BackendServerInfoSfuJanus)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Janus).UnmarshalEasyJSON(in)
				}
			}
		case "proxies":
			if in.IsNull() {
				in.Skip()
				out.Proxies = nil
			} else {
				in.Delim('[')
				if out.Proxies == nil {
					if !in.IsDelim(']') {
						out.Proxies = make([]BackendServerInfoSfuProxy, 0, 0)
					} else {
						out.Proxies = []BackendServerInfoSfuProxy{}
					}
				} else {
					out.Proxies = (out.Proxies)[:0]
				}
				for !in.IsDelim(']') {
					var v7 BackendServerInfoSfuProxy
					if in.IsNull() {
						in.Skip()
					} else {
						(v7).UnmarshalEasyJSON(in)
					}
					out.Proxies = append(out.Proxies, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling10(out *jwriter.Writer, in BackendServerInfoSfu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix[1:])
		out.String(string(in.Mode))
	}
	if in.Janus != nil {
		const prefix string = ",\"janus\":"
		out.RawString(prefix)
		(*in.Janus).MarshalEasyJSON(out)
	}
	if len(in.Proxies) != 0 {
		const prefix string = ",\"proxies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Proxies {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoSfu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoSfu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoSfu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoSfu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling10(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling11(in *jlexer.Lexer, out *BackendServerInfoNats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]string, 0, 4)
					} else {
						out.Urls = []string{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					if in.IsNull() {
						in.Skip()
					} else {
						v10 = string(in.String())
					}
					out.Urls = append(out.Urls, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "connected":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Connected = bool(in.Bool())
			}
		case "serverurl":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ServerUrl = string(in.String())
			}
		case "serverid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ServerID = string(in.String())
			}
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ServerVersion = string(in.String())
			}
		case "clustername":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ClusterName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling11(out *jwriter.Writer, in BackendServerInfoNats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Urls {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"connected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Connected))
	}
	if in.ServerUrl != "" {
		const prefix string = ",\"serverurl\":"
		out.RawString(prefix)
		out.String(string(in.ServerUrl))
	}
	if in.ServerID != "" {
		const prefix string = ",\"serverid\":"
		out.RawString(prefix)
		out.String(string(in.ServerID))
	}
	if in.ServerVersion != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.ServerVersion))
	}
	if in.ClusterName != "" {
		const prefix string = ",\"clustername\":"
		out.RawString(prefix)
		out.String(string(in.ClusterName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoNats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoNats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoNats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoNats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling11(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling12(in *jlexer.Lexer, out *BackendServerInfoGrpc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "target":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Target = string(in.String())
			}
		case "ip":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IP = string(in.String())
			}
		case "connected":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Connected = bool(in.Bool())
			}
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling12(out *jwriter.Writer, in BackendServerInfoGrpc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix[1:])
		out.String(string(in.Target))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"connected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Connected))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoGrpc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoGrpc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoGrpc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoGrpc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling12(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling13(in *jlexer.Lexer, out *BackendServerInfoEtcd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "endpoints":
			if in.IsNull() {
				in.Skip()
				out.Endpoints = nil
			} else {
				in.Delim('[')
				if out.Endpoints == nil {
					if !in.IsDelim(']') {
						out.Endpoints = make([]string, 0, 4)
					} else {
						out.Endpoints = []string{}
					}
				} else {
					out.Endpoints = (out.Endpoints)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					if in.IsNull() {
						in.Skip()
					} else {
						v13 = string(in.String())
					}
					out.Endpoints = append(out.Endpoints, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "active":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Active = string(in.String())
			}
		case "connected":
			if in.IsNull() {
				in.Skip()
				out.Connected = nil
			} else {
				if out.Connected == nil {
					out.Connected = new(bool)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					*out.Connected = bool(in.Bool())
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling13(out *jwriter.Writer, in BackendServerInfoEtcd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoints\":"
		out.RawString(prefix[1:])
		if in.Endpoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Endpoints {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.Active != "" {
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.String(string(in.Active))
	}
	if in.Connected != nil {
		const prefix string = ",\"connected\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Connected))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoEtcd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoEtcd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoEtcd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoEtcd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling13(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling14(in *jlexer.Lexer, out *BackendServerInfoDialout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "sessionid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SessionId = PublicSessionId(in.String())
			}
		case "connected":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Connected = bool(in.Bool())
			}
		case "address":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Address = string(in.String())
			}
		case "useragent":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserAgent = string(in.String())
			}
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					if in.IsNull() {
						in.Skip()
					} else {
						v16 = string(in.String())
					}
					out.Features = append(out.Features, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling14(out *jwriter.Writer, in BackendServerInfoDialout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sessionid\":"
		out.RawString(prefix[1:])
		out.String(string(in.SessionId))
	}
	{
		const prefix string = ",\"connected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Connected))
	}
	if in.Address != "" {
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"useragent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if len(in.Features) != 0 {
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Features {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfoDialout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfoDialout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfoDialout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfoDialout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling14(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling15(in *jlexer.Lexer, out *BackendServerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					if in.IsNull() {
						in.Skip()
					} else {
						v19 = string(in.String())
					}
					out.Features = append(out.Features, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sfu":
			if in.IsNull() {
				in.Skip()
				out.Sfu = nil
			} else {
				if out.Sfu == nil {
					out.Sfu = new(BackendServerInfoSfu)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Sfu).UnmarshalEasyJSON(in)
				}
			}
		case "dialout":
			if in.IsNull() {
				in.Skip()
				out.Dialout = nil
			} else {
				in.Delim('[')
				if out.Dialout == nil {
					if !in.IsDelim(']') {
						out.Dialout = make([]BackendServerInfoDialout, 0, 0)
					} else {
						out.Dialout = []BackendServerInfoDialout{}
					}
				} else {
					out.Dialout = (out.Dialout)[:0]
				}
				for !in.IsDelim(']') {
					var v20 BackendServerInfoDialout
					if in.IsNull() {
						in.Skip()
					} else {
						(v20).UnmarshalEasyJSON(in)
					}
					out.Dialout = append(out.Dialout, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nats":
			if in.IsNull() {
				in.Skip()
				out.Nats = nil
			} else {
				if out.Nats == nil {
					out.Nats = new(BackendServerInfoNats)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Nats).UnmarshalEasyJSON(in)
				}
			}
		case "grpc":
			if in.IsNull() {
				in.Skip()
				out.Grpc = nil
			} else {
				in.Delim('[')
				if out.Grpc == nil {
					if !in.IsDelim(']') {
						out.Grpc = make([]BackendServerInfoGrpc, 0, 1)
					} else {
						out.Grpc = []BackendServerInfoGrpc{}
					}
				} else {
					out.Grpc = (out.Grpc)[:0]
				}
				for !in.IsDelim(']') {
					var v21 BackendServerInfoGrpc
					if in.IsNull() {
						in.Skip()
					} else {
						(v21).UnmarshalEasyJSON(in)
					}
					out.Grpc = append(out.Grpc, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "etcd":
			if in.IsNull() {
				in.Skip()
				out.Etcd = nil
			} else {
				if out.Etcd == nil {
					out.Etcd = new(BackendServerInfoEtcd)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Etcd).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling15(out *jwriter.Writer, in BackendServerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Features {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if in.Sfu != nil {
		const prefix string = ",\"sfu\":"
		out.RawString(prefix)
		(*in.Sfu).MarshalEasyJSON(out)
	}
	if len(in.Dialout) != 0 {
		const prefix string = ",\"dialout\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v24, v25 := range in.Dialout {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Nats != nil {
		const prefix string = ",\"nats\":"
		out.RawString(prefix)
		(*in.Nats).MarshalEasyJSON(out)
	}
	if len(in.Grpc) != 0 {
		const prefix string = ",\"grpc\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Grpc {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Etcd != nil {
		const prefix string = ",\"etcd\":"
		out.RawString(prefix)
		(*in.Etcd).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendServerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendServerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendServerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendServerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling15(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling16(in *jlexer.Lexer, out *BackendRoomUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "userids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					if in.IsNull() {
						in.Skip()
					} else {
						v28 = string(in.String())
					}
					out.UserIds = append(out.UserIds, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Properties).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling16(out *jwriter.Writer, in BackendRoomUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.UserIds) != 0 {
		const prefix string = ",\"userids\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v29, v30 := range in.UserIds {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Properties).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling16(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling17(in *jlexer.Lexer, out *BackendRoomTransientRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "action":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Action = TransientAction(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Key = string(in.String())
			}
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		case "ttl":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TTL = time.Duration(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling17(out *jwriter.Writer, in BackendRoomTransientRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	if in.TTL != 0 {
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int64(int64(in.TTL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomTransientRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomTransientRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomTransientRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomTransientRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling17(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling18(in *jlexer.Lexer, out *BackendRoomSwitchToMessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "roomid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.RoomId = string(in.String())
			}
		case "sessions":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Sessions).UnmarshalJSON(data))
				}
			}
		case "sessionslist":
			if in.IsNull() {
				in.Skip()
				out.SessionsList = nil
			} else {
				in.Delim('[')
				if out.SessionsList == nil {
					if !in.IsDelim(']') {
						out.SessionsList = make(BackendRoomSwitchToPublicSessionsList, 0, 4)
					} else {
						out.SessionsList = BackendRoomSwitchToPublicSessionsList{}
					}
				} else {
					out.SessionsList = (out.SessionsList)[:0]
				}
				for !in.IsDelim(']') {
					var v31 PublicSessionId
					if in.IsNull() {
						in.Skip()
					} else {
						v31 = PublicSessionId(in.String())
					}
					out.SessionsList = append(out.SessionsList, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sessionsmap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SessionsMap = make(BackendRoomSwitchToPublicSessionsMap)
				} else {
					out.SessionsMap = nil
				}
				for !in.IsDelim('}') {
					key := PublicSessionId(in.String())
					in.WantColon()
					var v32 json.RawMessage
					if in.IsNull() {
						in.Skip()
					} else {
						if data := in.Raw(); in.Ok() {
							in.AddError((v32).UnmarshalJSON(data))
						}
					}
					(out.SessionsMap)[key] = v32
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling18(out *jwriter.Writer, in BackendRoomSwitchToMessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roomid\":"
		out.RawString(prefix[1:])
		out.String(string(in.RoomId))
	}
	if len(in.Sessions) != 0 {
		const prefix string = ",\"sessions\":"
		out.RawString(prefix)
		out.Raw((in.Sessions).MarshalJSON())
	}
	if len(in.SessionsList) != 0 {
		const prefix string = ",\"sessionslist\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v33, v34 := range in.SessionsList {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.SessionsMap) != 0 {
		const prefix string = ",\"sessionsmap\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v35First := true
			for v35Name, v35Value := range in.SessionsMap {
				if v35First {
					v35First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v35Name))
				out.RawByte(':')
				out.Raw((v35Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomSwitchToMessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomSwitchToMessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomSwitchToMessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomSwitchToMessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling18(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling19(in *jlexer.Lexer, out *BackendRoomParticipantsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "changed":
			if in.IsNull() {
				in.Skip()
				out.Changed = nil
			} else {
				in.Delim('[')
				if out.Changed == nil {
					if !in.IsDelim(']') {
						out.Changed = make([]api.StringMap, 0, 8)
					} else {
						out.Changed = []api.StringMap{}
					}
				} else {
					out.Changed = (out.Changed)[:0]
				}
				for !in.IsDelim(']') {
					var v36 api.StringMap
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v36 = make(api.StringMap)
						} else {
							v36 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v37 interface{}
							if m, ok := v37.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v37.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v37 = in.Interface()
							}
							(v36)[key] = v37
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Changed = append(out.Changed, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]api.StringMap, 0, 8)
					} else {
						out.Users = []api.StringMap{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v38 api.StringMap
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v38 = make(api.StringMap)
						} else {
							v38 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v39 interface{}
							if m, ok := v39.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v39.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v39 = in.Interface()
							}
							(v38)[key] = v39
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Users = append(out.Users, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling19(out *jwriter.Writer, in BackendRoomParticipantsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Changed) != 0 {
		const prefix string = ",\"changed\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v40, v41 := range in.Changed {
				if v40 > 0 {
					out.RawByte(',')
				}
				if v41 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v42First := true
					for v42Name, v42Value := range v41 {
						if v42First {
							v42First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v42Name))
						out.RawByte(':')
						if m, ok := v42Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v42Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v42Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.Users {
				if v43 > 0 {
					out.RawByte(',')
				}
				if v44 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v45First := true
					for v45Name, v45Value := range v44 {
						if v45First {
							v45First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v45Name))
						out.RawByte(':')
						if m, ok := v45Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v45Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v45Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomParticipantsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomParticipantsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomParticipantsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomParticipantsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling19(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling20(in *jlexer.Lexer, out *BackendRoomMessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Data).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling20(out *jwriter.Writer, in BackendRoomMessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomMessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomMessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomMessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomMessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling20(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling21(in *jlexer.Lexer, out *BackendRoomInviteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "userids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					if in.IsNull() {
						in.Skip()
					} else {
						v46 = string(in.String())
					}
					out.UserIds = append(out.UserIds, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "alluserids":
			if in.IsNull() {
				in.Skip()
				out.AllUserIds = nil
			} else {
				in.Delim('[')
				if out.AllUserIds == nil {
					if !in.IsDelim(']') {
						out.AllUserIds = make([]string, 0, 4)
					} else {
						out.AllUserIds = []string{}
					}
				} else {
					out.AllUserIds = (out.AllUserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v47 string
					if in.IsNull() {
						in.Skip()
					} else {
						v47 = string(in.String())
					}
					out.AllUserIds = append(out.AllUserIds, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Properties).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling21(out *jwriter.Writer, in BackendRoomInviteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.UserIds) != 0 {
		const prefix string = ",\"userids\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v48, v49 := range in.UserIds {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	if len(in.AllUserIds) != 0 {
		const prefix string = ",\"alluserids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.AllUserIds {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Properties).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomInviteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomInviteRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomInviteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomInviteRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling21(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling22(in *jlexer.Lexer, out *BackendRoomInCallRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "incall":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.InCall).UnmarshalJSON(data))
				}
			}
		case "all":
			if in.IsNull() {
				in.Skip()
			} else {
				out.All = bool(in.Bool())
			}
		case "changed":
			if in.IsNull() {
				in.Skip()
				out.Changed = nil
			} else {
				in.Delim('[')
				if out.Changed == nil {
					if !in.IsDelim(']') {
						out.Changed = make([]api.StringMap, 0, 8)
					} else {
						out.Changed = []api.StringMap{}
					}
				} else {
					out.Changed = (out.Changed)[:0]
				}
				for !in.IsDelim(']') {
					var v52 api.StringMap
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v52 = make(api.StringMap)
						} else {
							v52 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v53 interface{}
							if m, ok := v53.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v53.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v53 = in.Interface()
							}
							(v52)[key] = v53
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Changed = append(out.Changed, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]api.StringMap, 0, 8)
					} else {
						out.Users = []api.StringMap{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v54 api.StringMap
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v54 = make(api.StringMap)
						} else {
							v54 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v55 interface{}
							if m, ok := v55.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v55.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v55 = in.Interface()
							}
							(v54)[key] = v55
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Users = append(out.Users, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling22(out *jwriter.Writer, in BackendRoomInCallRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.InCall) != 0 {
		const prefix string = ",\"incall\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.InCall).MarshalJSON())
	}
	if in.All {
		const prefix string = ",\"all\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.All))
	}
	if len(in.Changed) != 0 {
		const prefix string = ",\"changed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Changed {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v58First := true
					for v58Name, v58Value := range v57 {
						if v58First {
							v58First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v58Name))
						out.RawByte(':')
						if m, ok := v58Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v58Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v58Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Users {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v61First := true
					for v61Name, v61Value := range v60 {
						if v61First {
							v61First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v61Name))
						out.RawByte(':')
						if m, ok := v61Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v61Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v61Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomInCallRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomInCallRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomInCallRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomInCallRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling22(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling23(in *jlexer.Lexer, out *BackendRoomDisinviteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "userids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v62 string
					if in.IsNull() {
						in.Skip()
					} else {
						v62 = string(in.String())
					}
					out.UserIds = append(out.UserIds, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sessionids":
			if in.IsNull() {
				in.Skip()
				out.SessionIds = nil
			} else {
				in.Delim('[')
				if out.SessionIds == nil {
					if !in.IsDelim(']') {
						out.SessionIds = make([]RoomSessionId, 0, 4)
					} else {
						out.SessionIds = []RoomSessionId{}
					}
				} else {
					out.SessionIds = (out.SessionIds)[:0]
				}
				for !in.IsDelim(']') {
					var v63 RoomSessionId
					if in.IsNull() {
						in.Skip()
					} else {
						v63 = RoomSessionId(in.String())
					}
					out.SessionIds = append(out.SessionIds, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "alluserids":
			if in.IsNull() {
				in.Skip()
				out.AllUserIds = nil
			} else {
				in.Delim('[')
				if out.AllUserIds == nil {
					if !in.IsDelim(']') {
						out.AllUserIds = make([]string, 0, 4)
					} else {
						out.AllUserIds = []string{}
					}
				} else {
					out.AllUserIds = (out.AllUserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					if in.IsNull() {
						in.Skip()
					} else {
						v64 = string(in.String())
					}
					out.AllUserIds = append(out.AllUserIds, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Properties).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling23(out *jwriter.Writer, in BackendRoomDisinviteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.UserIds) != 0 {
		const prefix string = ",\"userids\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v65, v66 := range in.UserIds {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	if len(in.SessionIds) != 0 {
		const prefix string = ",\"sessionids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v67, v68 := range in.SessionIds {
				if v67 > 0 {
					out.RawByte(',')
				}
				out.String(string(v68))
			}
			out.RawByte(']')
		}
	}
	if len(in.AllUserIds) != 0 {
		const prefix string = ",\"alluserids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v69, v70 := range in.AllUserIds {
				if v69 > 0 {
					out.RawByte(',')
				}
				out.String(string(v70))
			}
			out.RawByte(']')
		}
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Properties).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomDisinviteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomDisinviteRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomDisinviteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomDisinviteRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling23(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling24(in *jlexer.Lexer, out *BackendRoomDialoutResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "callid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.CallId = string(in.String())
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Error).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling24(out *jwriter.Writer, in BackendRoomDialoutResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CallId != "" {
		const prefix string = ",\"callid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CallId))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomDialoutResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomDialoutResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomDialoutResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomDialoutResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling24(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling25(in *jlexer.Lexer, out *BackendRoomDialoutRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "number":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Number = string(in.String())
			}
		case "options":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Options).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling25(out *jwriter.Writer, in BackendRoomDialoutRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		out.Raw((in.Options).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomDialoutRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomDialoutRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomDialoutRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomDialoutRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling25(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling26(in *jlexer.Lexer, out *BackendRoomDialoutError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "code":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Code = string(in.String())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Message = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling26(out *jwriter.Writer, in BackendRoomDialoutError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomDialoutError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomDialoutError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomDialoutError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomDialoutError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling26(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling27(in *jlexer.Lexer, out *BackendRoomDeleteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "userids":
			if in.IsNull() {
				in.Skip()
				out.UserIds = nil
			} else {
				in.Delim('[')
				if out.UserIds == nil {
					if !in.IsDelim(']') {
						out.UserIds = make([]string, 0, 4)
					} else {
						out.UserIds = []string{}
					}
				} else {
					out.UserIds = (out.UserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v71 string
					if in.IsNull() {
						in.Skip()
					} else {
						v71 = string(in.String())
					}
					out.UserIds = append(out.UserIds, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling27(out *jwriter.Writer, in BackendRoomDeleteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.UserIds) != 0 {
		const prefix string = ",\"userids\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v72, v73 := range in.UserIds {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendRoomDeleteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendRoomDeleteRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendRoomDeleteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendRoomDeleteRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling27(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling28(in *jlexer.Lexer, out *BackendPingEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "userid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserId = string(in.String())
			}
		case "sessionid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SessionId = RoomSessionId(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling28(out *jwriter.Writer, in BackendPingEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserId != "" {
		const prefix string = ",\"userid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"sessionid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SessionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendPingEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendPingEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendPingEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendPingEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling28(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling29(in *jlexer.Lexer, out *BackendInformationEtcd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "url":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Url = string(in.String())
			}
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]string, 0, 4)
					} else {
						out.Urls = []string{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					if in.IsNull() {
						in.Skip()
					} else {
						v74 = string(in.String())
					}
					out.Urls = append(out.Urls, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Secret = string(in.String())
			}
		case "maxstreambitrate":
			if in.IsNull() {
				in.Skip()
			} else {
				out.MaxStreamBitrate = int(in.Int())
			}
		case "maxscreenbitrate":
			if in.IsNull() {
				in.Skip()
			} else {
				out.MaxScreenBitrate = int(in.Int())
			}
		case "sessionlimit":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SessionLimit = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling29(out *jwriter.Writer, in BackendInformationEtcd) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Url != "" {
		const prefix string = ",\"url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	if len(in.Urls) != 0 {
		const prefix string = ",\"urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v75, v76 := range in.Urls {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.String(string(v76))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"secret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Secret))
	}
	if in.MaxStreamBitrate != 0 {
		const prefix string = ",\"maxstreambitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MaxStreamBitrate))
	}
	if in.MaxScreenBitrate != 0 {
		const prefix string = ",\"maxscreenbitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MaxScreenBitrate))
	}
	if in.SessionLimit != 0 {
		const prefix string = ",\"sessionlimit\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SessionLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendInformationEtcd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendInformationEtcd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendInformationEtcd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendInformationEtcd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling29(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling30(in *jlexer.Lexer, out *BackendClientSessionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "roomid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.RoomId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling30(out *jwriter.Writer, in BackendClientSessionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"roomid\":"
		out.RawString(prefix)
		out.String(string(in.RoomId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientSessionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientSessionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientSessionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientSessionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling30(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling31(in *jlexer.Lexer, out *BackendClientSessionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "roomid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.RoomId = string(in.String())
			}
		case "action":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Action = string(in.String())
			}
		case "sessionid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SessionId = PublicSessionId(in.String())
			}
		case "userid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserId = string(in.String())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.User).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling31(out *jwriter.Writer, in BackendClientSessionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"roomid\":"
		out.RawString(prefix)
		out.String(string(in.RoomId))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"sessionid\":"
		out.RawString(prefix)
		out.String(string(in.SessionId))
	}
	if in.UserId != "" {
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	if len(in.User) != 0 {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.Raw((in.User).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientSessionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientSessionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientSessionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientSessionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling31(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling32(in *jlexer.Lexer, out *BackendClientRoomResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "roomid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.RoomId = string(in.String())
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Properties).UnmarshalJSON(data))
				}
			}
		case "session":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Session).UnmarshalJSON(data))
				}
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				if out.Permissions == nil {
					out.Permissions = new([]Permission)
				}
				if in.IsNull() {
					in.Skip()
					*out.Permissions = nil
				} else {
					in.Delim('[')
					if *out.Permissions == nil {
						if !in.IsDelim(']') {
							*out.Permissions = make([]Permission, 0, 4)
						} else {
							*out.Permissions = []Permission{}
						}
					} else {
						*out.Permissions = (*out.Permissions)[:0]
					}
					for !in.IsDelim(']') {
						var v77 Permission
						if in.IsNull() {
							in.Skip()
						} else {
							v77 = Permission(in.String())
						}
						*out.Permissions = append(*out.Permissions, v77)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling32(out *jwriter.Writer, in BackendClientRoomResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"roomid\":"
		out.RawString(prefix)
		out.String(string(in.RoomId))
	}
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		out.Raw((in.Properties).MarshalJSON())
	}
	if len(in.Session) != 0 {
		const prefix string = ",\"session\":"
		out.RawString(prefix)
		out.Raw((in.Session).MarshalJSON())
	}
	if in.Permissions != nil {
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if *in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range *in.Permissions {
				if v78 > 0 {
					out.RawByte(',')
				}
				out.String(string(v79))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientRoomResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientRoomResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientRoomResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientRoomResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling32(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling33(in *jlexer.Lexer, out *BackendClientRoomRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "roomid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.RoomId = string(in.String())
			}
		case "action":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Action = string(in.String())
			}
		case "userid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserId = string(in.String())
			}
		case "sessionid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.SessionId = RoomSessionId(in.String())
			}
		case "actorid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ActorId = string(in.String())
			}
		case "actortype":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ActorType = string(in.String())
			}
		case "incall":
			if in.IsNull() {
				in.Skip()
			} else {
				out.InCall = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling33(out *jwriter.Writer, in BackendClientRoomRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"roomid\":"
		out.RawString(prefix)
		out.String(string(in.RoomId))
	}
	if in.Action != "" {
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"sessionid\":"
		out.RawString(prefix)
		out.String(string(in.SessionId))
	}
	if in.ActorId != "" {
		const prefix string = ",\"actorid\":"
		out.RawString(prefix)
		out.String(string(in.ActorId))
	}
	if in.ActorType != "" {
		const prefix string = ",\"actortype\":"
		out.RawString(prefix)
		out.String(string(in.ActorType))
	}
	if in.InCall != 0 {
		const prefix string = ",\"incall\":"
		out.RawString(prefix)
		out.Int(int(in.InCall))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientRoomRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientRoomRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientRoomRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientRoomRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling33(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling34(in *jlexer.Lexer, out *BackendClientRingResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "roomid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.RoomId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling34(out *jwriter.Writer, in BackendClientRingResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"roomid\":"
		out.RawString(prefix)
		out.String(string(in.RoomId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientRingResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientRingResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientRingResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientRingResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling34(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling35(in *jlexer.Lexer, out *BackendClientResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Type = string(in.String())
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Error).UnmarshalEasyJSON(in)
				}
			}
		case "auth":
			if in.IsNull() {
				in.Skip()
				out.Auth = nil
			} else {
				if out.Auth == nil {
					out.Auth = new(BackendClientAuthResponse)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Auth).UnmarshalEasyJSON(in)
				}
			}
		case "room":
			if in.IsNull() {
				in.Skip()
				out.Room = nil
			} else {
				if out.Room == nil {
					out.Room = new(BackendClientRoomResponse)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Room).UnmarshalEasyJSON(in)
				}
			}
		case "ping":
			if in.IsNull() {
				in.Skip()
				out.Ping = nil
			} else {
				if out.Ping == nil {
					out.Ping = new(BackendClientRingResponse)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Ping).UnmarshalEasyJSON(in)
				}
			}
		case "session":
			if in.IsNull() {
				in.Skip()
				out.Session = nil
			} else {
				if out.Session == nil {
					out.Session = new(BackendClientSessionResponse)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Session).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling35(out *jwriter.Writer, in BackendClientResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		(*in.Error).MarshalEasyJSON(out)
	}
	if in.Auth != nil {
		const prefix string = ",\"auth\":"
		out.RawString(prefix)
		(*in.Auth).MarshalEasyJSON(out)
	}
	if in.Room != nil {
		const prefix string = ",\"room\":"
		out.RawString(prefix)
		(*in.Room).MarshalEasyJSON(out)
	}
	if in.Ping != nil {
		const prefix string = ",\"ping\":"
		out.RawString(prefix)
		(*in.Ping).MarshalEasyJSON(out)
	}
	if in.Session != nil {
		const prefix string = ",\"session\":"
		out.RawString(prefix)
		(*in.Session).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling35(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling36(in *jlexer.Lexer, out *BackendClientRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Type = string(in.String())
			}
		case "auth":
			if in.IsNull() {
				in.Skip()
				out.Auth = nil
			} else {
				if out.Auth == nil {
					out.Auth = new(BackendClientAuthRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Auth).UnmarshalEasyJSON(in)
				}
			}
		case "room":
			if in.IsNull() {
				in.Skip()
				out.Room = nil
			} else {
				if out.Room == nil {
					out.Room = new(BackendClientRoomRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Room).UnmarshalEasyJSON(in)
				}
			}
		case "ping":
			if in.IsNull() {
				in.Skip()
				out.Ping = nil
			} else {
				if out.Ping == nil {
					out.Ping = new(BackendClientPingRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Ping).UnmarshalEasyJSON(in)
				}
			}
		case "session":
			if in.IsNull() {
				in.Skip()
				out.Session = nil
			} else {
				if out.Session == nil {
					out.Session = new(BackendClientSessionRequest)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Session).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling36(out *jwriter.Writer, in BackendClientRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Auth != nil {
		const prefix string = ",\"auth\":"
		out.RawString(prefix)
		(*in.Auth).MarshalEasyJSON(out)
	}
	if in.Room != nil {
		const prefix string = ",\"room\":"
		out.RawString(prefix)
		(*in.Room).MarshalEasyJSON(out)
	}
	if in.Ping != nil {
		const prefix string = ",\"ping\":"
		out.RawString(prefix)
		(*in.Ping).MarshalEasyJSON(out)
	}
	if in.Session != nil {
		const prefix string = ",\"session\":"
		out.RawString(prefix)
		(*in.Session).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling36(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling37(in *jlexer.Lexer, out *BackendClientPingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "roomid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.RoomId = string(in.String())
			}
		case "entries":
			if in.IsNull() {
				in.Skip()
				out.Entries = nil
			} else {
				in.Delim('[')
				if out.Entries == nil {
					if !in.IsDelim(']') {
						out.Entries = make([]BackendPingEntry, 0, 2)
					} else {
						out.Entries = []BackendPingEntry{}
					}
				} else {
					out.Entries = (out.Entries)[:0]
				}
				for !in.IsDelim(']') {
					var v80 BackendPingEntry
					if in.IsNull() {
						in.Skip()
					} else {
						(v80).UnmarshalEasyJSON(in)
					}
					out.Entries = append(out.Entries, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling37(out *jwriter.Writer, in BackendClientPingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"roomid\":"
		out.RawString(prefix)
		out.String(string(in.RoomId))
	}
	{
		const prefix string = ",\"entries\":"
		out.RawString(prefix)
		if in.Entries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v81, v82 := range in.Entries {
				if v81 > 0 {
					out.RawByte(',')
				}
				(v82).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientPingRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientPingRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientPingRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientPingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling37(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling38(in *jlexer.Lexer, out *BackendClientAuthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "userid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserId = string(in.String())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.User).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling38(out *jwriter.Writer, in BackendClientAuthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.Raw((in.User).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientAuthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientAuthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientAuthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientAuthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling38(l, v)
}
func easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling39(in *jlexer.Lexer, out *BackendClientAuthRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "version":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Version = string(in.String())
			}
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				if data := in.Raw(); in.Ok() {
					in.AddError((out.Params).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling39(out *jwriter.Writer, in BackendClientAuthRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		out.Raw((in.Params).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackendClientAuthRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackendClientAuthRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4354c623EncodeGithubComStrukturagNextcloudSpreedSignaling39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackendClientAuthRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackendClientAuthRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4354c623DecodeGithubComStrukturagNextcloudSpreedSignaling39(l, v)
}
